



Random exploration: 100%|██████████████████| 6400/6400 [00:09<00:00, 668.83it/s]
Epoch:   0%|                                             | 0/15 [00:00<?, ?it/s]








Collecting interactions: 100%|████████████▉| 6383/6400 [00:16<00:00, 404.04it/s]/usr/lib/python3/dist-packages/torch/_tensor.py:575: UserWarning: floor_divide is deprecated, and will be removed in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values.
To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor'). (Triggered internally at  ../aten/src/ATen/native/BinaryOps.cpp:461.)
  return torch.floor_divide(self, other)
/usr/lib/python3/dist-packages/torch/nn/functional.py:1805: UserWarning: nn.functional.sigmoid is deprecated. Use torch.sigmoid instead.
  warnings.warn("nn.functional.sigmoid is deprecated. Use torch.sigmoid instead.")
/usr/lib/python3/dist-packages/torch/optim/lr_scheduler.py:129: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  warnings.warn("Detected call of `lr_scheduler.step()` before `optimizer.step()`. "
Training world model:   0%|                           | 0/45000 [00:00<?, ?it/s]
Epoch:   0%|                                             | 0/15 [00:17<?, ?it/s]
Traceback (most recent call last):
  File "/usr/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/usr/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/workspace/alexsun/SimPLe/simple/__main__.py", line 212, in <module>
    simple.train()
  File "/workspace/alexsun/SimPLe/simple/__main__.py", line 143, in train
    self.trainer.train(epoch, self.real_env)
  File "/workspace/alexsun/SimPLe/simple/trainer.py", line 164, in train
    blended = frames * (1 - alpha) + cur_next_state * alpha
RuntimeError: The size of tensor a (12) must match the size of tensor b (3) at non-singleton dimension 1
Traceback (most recent call last):
  File "/usr/lib/python3.8/runpy.py", line 194, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/usr/lib/python3.8/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/workspace/alexsun/SimPLe/simple/__main__.py", line 212, in <module>
    simple.train()
  File "/workspace/alexsun/SimPLe/simple/__main__.py", line 143, in train
    self.trainer.train(epoch, self.real_env)
  File "/workspace/alexsun/SimPLe/simple/trainer.py", line 164, in train
    blended = frames * (1 - alpha) + cur_next_state * alpha
RuntimeError: The size of tensor a (12) must match the size of tensor b (3) at non-singleton dimension 1